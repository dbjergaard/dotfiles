* General
** Automatically byte-compile 
Compile files that have already been compiled before.
#+BEGIN_SRC emacs-lisp  
(defun auto-byte-recompile ()
  "If the current buffer is in emacs-lisp-mode and there already exists an `.elc'
  file corresponding to the current buffer file, then recompile the file."
  (interactive)
  (when (and (eq major-mode 'emacs-lisp-mode)
             (file-exists-p (byte-compile-dest-file buffer-file-name)))
    (byte-compile-file buffer-file-name)))
  (add-hook 'after-save-hook 'auto-byte-recompile)
#+END_SRC
** Start emacs server for emacsclient
#+BEGIN_SRC emacs-lisp
(server-start)
(autoload 'server-edit "server" nil t)
(server-edit)
#+END_SRC
** Set up ELPA
#+BEGIN_SRC emacs-lisp
    (setq package-archives '(("org" . "http://orgmode.org/elpa/")
                             ("ELPA" . "http://tromey.com/elpa/") 
                             ("gnu" . "http://elpa.gnu.org/packages/")
                             ("marmalade" . "http://marmalade-repo.org/packages/")
                             ("melpa" . "http://melpa.org/packages/")))
  (setq package-enable-at-startup nil)
  (package-initialize)
(require 'use-package)
#+END_SRC
** Paradox Package Token
#+BEGIN_SRC emacs-lisp
  (use-package paradox
    :init
    (setq paradox-github-token  "10d1f4c6c3d85894cec0a53d1b9a0540002a7659"))
#+END_SRC
** Notifications
#+BEGIN_SRC emacs-lisp
(use-package notify)
#+END_SRC
* Internet
** Tramp
#+BEGIN_SRC emacs-lisp
;; Set tramp variables
(setq tramp-default-method "ssh")
;; have tramp save temps locally...
(setq auto-save-file-name-transforms
      '(("\\`/[^/]*:\\([^/]*/\\)*\\([^/]*\\)\\'" "/tmp/\\2" t)
	("\\`/?\\([^/]*/\\)*\\([^/]*\\)\\'" "~/.emacs.d/auto-save/" t)))
#+END_SRC
** Browsing stuffs
Google region (awesome) (taken from: http://blog.tedroden.com/emacs/google_region.ejr)
#+BEGIN_SRC emacs-lisp
(defun google-region (&optional flags)
  "Google the selected region"
  (interactive)
  (let ((query (buffer-substring (region-beginning) (region-end))))
    (browse-url (concat "http://www.google.com/search?ie=utf-8&oe=utf-8&q=" query))))
;; press control-c g to google the selected region
(global-set-key (kbd "C-c g") 'google-region)
#+END_SRC
Work around for firefox 36+ and browse url
#+BEGIN_SRC emacs-lisp
  (defun browse-url-firefox (url &optional new-window)
      "Ask the Firefox WWW browser to load URL.
    Default to the URL around or before point.  The strings in
    variable `browse-url-firefox-arguments' are also passed to
    Firefox.
    
    When called interactively, if variable
    `browse-url-new-window-flag' is non-nil, load the document in a
    new Firefox window, otherwise use a random existing one.  A
    non-nil interactive prefix argument reverses the effect of
    `browse-url-new-window-flag'.
    
    If `browse-url-firefox-new-window-is-tab' is non-nil, then
    whenever a document would otherwise be loaded in a new window, it
    is loaded in a new tab in an existing window instead.
    
    When called non-interactively, optional second argument
    NEW-WINDOW is used instead of `browse-url-new-window-flag'."
      (interactive (browse-url-interactive-arg "URL: "))
      (setq url (browse-url-encode-url url))
      (let* ((process-environment (browse-url-process-environment))
             (window-args (if (browse-url-maybe-new-window new-window)
                              (if browse-url-firefox-new-window-is-tab
                                  '("-new-tab")
                                '("-new-window"))))
             (ff-args (append browse-url-firefox-arguments window-args (list url)))
             (process-name (concat "firefox " url))
             (process (apply 'start-process process-name nil
                             browse-url-firefox-program ff-args) )) ))
#+END_SRC
** ERC
#+BEGIN_SRC emacs-lisp
(erc-match-mode 1)
(defun notify-erc (match-type nickuserhost message)
  "Notify when a message is received."
  (notify (format "%s in %s"
                  ;; Username of sender
                  (car (split-string nickuserhost "!"))
                  ;; Channel
                  (or (erc-default-target) "#unknown"))
          ;; Remove duplicate spaces
          (replace-regexp-in-string " +" " " message)
          :icon "emacs-snapshot"
          :timeout -1))

(add-hook 'erc-text-matched-hook #'notify-erc)
(setq erc-track-enable-keybindings nil)
#+END_SRC
** Jabber
#+BEGIN_SRC emacs-lisp
  (use-package jabber
    :ensure t
    :init
    (setq jabber-nickname "Dave"
          jabber-account-list '(("dbjergaard@gmail.com"
                                 (:network-server . "talk.google.com")
                                 (:port . 443)
                                 (:connection-type . ssl))
                                ("david.bjergaard@gmail.com"
                                 (:network-server . "talk.google.com")
                                 (:port . 443)
                                 (:connection-type . ssl)))
          jabber-message-alert-same-buffer nil
          jabber-vcard-avatars-retrieve t)
    (setq-default jabber-mode-line-string " ")
    :config
    (add-hook 'jabber-chat-mode-hook 'goto-address)
    (defun libnotify-jabber-notify (from buf text proposed-alert)
      "Notify new Jabber chat message via notify"
      (when (or jabber-message-alert-same-buffer
                (not (memq (selected-window) (get-buffer-window-list buf))))
        (if (jabber-muc-sender-p from)
            (notify (format "(PM) %s"
                            (jabber-jid-displayname (jabber-jid-user from)))
                    (format "%s: %s" (jabber-jid-resource from) text)))
        (notify (format "%s" (jabber-jid-displayname from))
                text)))
    (defun jabber-reconnect-all ()
      "Disconnects, reconnects, and sends online status to all configured jabber accounts"
      (interactive)
      (jabber-disconnect)
      (unless (equal 2 (length jabber-connections))
        (jabber-connect-all)
        (jabber-send-presence "" "" 10)))
    
    (add-hook 'jabber-alert-message-hooks #'libnotify-jabber-notify)
    (add-hook 'jabber-post-connect-hooks (lambda ()
                                           (jabber-mode-line-mode)
                                           (setq jabber-mode-line-string " ")))
    (add-hook 'jabber-chat-mode-hook #'emojify-mode))
#+END_SRC
** Twitter
#+BEGIN_SRC emacs-lisp
  (use-package twittering-mode
    :init
    (setq twittering-use-master-password t
          twittering-timer-interval 300
          twittering-icon-mode t
          twittering-url-show-status nil
          twittering-tinyurl-service 'bit.ly)
    :config
    (add-hook 'twittering-edit-mode (lambda () (ispell-minor-mode) (flyspell-mode))))
#+END_SRC
** Email
#+BEGIN_SRC emacs-lisp
(setq mail-user-agent 'gnus-user-agent)
#+END_SRC
* Editing 
** Emacs Interface editing
Move emacs "backup" files to a directory
#+BEGIN_SRC emacs-lisp
(push '("." . "~/.emacs.d/backups") backup-directory-alist)
#+END_SRC
Unique buffer names
#+BEGIN_SRC emacs-lisp
(setq 
  uniquify-buffer-name-style 'forward
  uniquify-separator ":")
#+END_SRC
Make sentences end with one space instead of two spaces
#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC
*** EVIL
#+BEGIN_SRC emacs-lisp
  (use-package evil-leader
    :ensure t
    :config
    (global-evil-leader-mode)
    (evil-leader/set-leader ",")
    (evil-leader/set-key
      "m" #'compile
      "j" #'jabber-reconnect-all
      "l" #'linum-mode))
  (use-package evil
    :ensure t
    :config (evil-mode t)
    (fset 'evil-visual-update-x-selection 'ignore)
    (define-key evil-normal-state-map (kbd "C-k") #'evil-scroll-up)
    (define-key evil-normal-state-map (kbd "C-j") #'evil-scroll-down)
    (mapc (lambda (mode-map)
            (evil-add-hjkl-bindings mode-map 'emacs)) '(ibuffer-mode-map
                                                        jabber-roster-mode-map
                                                        gnus-group-mode-map
                                                        gnus-server-mode-map
                                                        gnus-browse-mode-map
                                                        gnus-summary-mode-map
                                                        gnus-article-mode-map
                                                        package-menu-mode-map))
    (defun evil-visual-update-x-selection (&optional buffer)
    "Update the X selection with the current visual region."
    (with-current-buffer (or buffer (current-buffer))
      (when (and (evil-visual-state-p)
                 (fboundp 'x-set-selection)   
                 (or (not (boundp 'ns-initialized))
                     (with-no-warnings ns-initialized))
                 (not (eq evil-visual-selection 'block)))
        (x-set-selection 'PRIMARY (buffer-substring-no-properties
                                   evil-visual-beginning
                                   evil-visual-end))
        (setq x-last-selected-text-primary nil))))
    (evil-define-motion evil-little-word (count)
      :type exclusive
      (let* ((case-fold-search nil)
             (count (if count count 1)))
        (while (> count 0)
          (forward-char)
          (search-forward-regexp "[_A-Z]\\|\\W" nil t)
          (backward-char)
          (decf count))))
    (define-key evil-operator-state-map (kbd "lw") #'evil-little-word))
  (use-package evil-surround
    :ensure t
    :config (global-evil-surround-mode 1))
  (use-package evil-numbers
    :ensure t
    :config
    (define-key evil-normal-state-map (kbd "C-a") 'evil-numbers/inc-at-pt)
    (define-key evil-normal-state-map (kbd "M-a") 'evil-numbers/dec-at-pt))
  (use-package evil-smartparens
    :ensure t
    :config
    (add-hook 'smartparens-enabled-hook #'evil-smartparens-mode))
  (use-package evil-commentary
    :ensure t
    :config (evil-commentary-mode))
  (use-package evil-tutor
    :ensure t)
  (use-package evil-ediff
    :ensure t)
#+END_SRC
*** Dired customizations
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
  (defun dired-copy-filename ()
    "Get filename+path and copy it to kill ring in dired"
    (interactive)
    (message "Slurped %s " (kill-new (dired-get-filename))))
  (add-hook 'dired-load-hook
            (lambda ()
              (load "dired-x")
              ;; Set dired-x global variables here.  For example:
              ))
  (add-hook 'dired-mode-hook
            (lambda ()
              ;; Set dired-x buffer-local variables here.  For example:
              (define-key dired-mode-map "c" 'dired-copy-filename)))
  (setq dired-guess-shell-alist-user '(("\\.djvu$" "evince")
                                       ("\\.pdf$" "evince")
                                       ("\\.ps$" "evince"))
        dired-listing-switches "-alh"
        dired-omit-files "^\\.?#\\|^\\.?~\\|^\\.[A-Za-z0-9]"
        dired-recursive-copies 'always
        dired-recursive-deletes 'top
        dired-dwim-target t
        global-auto-revert-non-file-buffers t
        auto-revert-verbose nil)
#+END_SRC
*** Disable Scroll Bar
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
#+END_SRC
*** Hi-line mode
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode t)
(set-face-underline 'hl-line nil)
#+END_SRC
*** Custom rebinds for better productivity
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-x\C-m" #'execute-extended-command)
  (global-set-key "\C-c\C-m" #'execute-extended-command)
  (global-set-key "\C-w" #'backward-kill-word)
  (global-set-key "\C-x\C-k" #'kill-region)
  (global-set-key "\C-c\C-k" #'kill-region)

  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))

  ;; (global-set-key (kbd "M-j")
  ;;                 (lambda ()
  ;;                   (interactive)
  ;;                   (join-line -1)))
#+END_SRC
*** Toggle-Map
[[http://endlessparentheses.com/the-toggle-map-and-wizardry.html][Taken from here]]

"The manual recommends C-c for user keys, but I (Artur Malabarba) like
using C-x for global keys and using C-c for mode-specific keys." (I
(Dave) agree with this philosophy, so the comment stays.)
#+BEGIN_SRC emacs-lisp
  (define-prefix-command 'endless/toggle-map)
  (define-key ctl-x-map "t" 'endless/toggle-map)
  (define-key endless/toggle-map "c" #'column-number-mode)
  (define-key endless/toggle-map "d" #'toggle-debug-on-error)
  (define-key endless/toggle-map "e" #'toggle-debug-on-error)
  (define-key endless/toggle-map "f" #'auto-fill-mode)
  (define-key endless/toggle-map "l" #'toggle-truncate-lines)
  (define-key endless/toggle-map "q" #'toggle-debug-on-quit)
  (define-key endless/toggle-map "r" #'read-only-mode)
  (define-key endless/toggle-map "t" #'toggle-themes)
  (define-key endless/toggle-map "w" #'whitespace-mode)
#+END_SRC
*** Launch-Map
#+BEGIN_SRC emacs-lisp
  (define-prefix-command 'launcher-map)
  (define-key ctl-x-map "l" 'launcher-map)
  ;; (global-set-key (kbd "s-l") 'launcher-map)
  (define-key launcher-map "c" #'calc)
  (define-key launcher-map "C" #'calendar)
  (define-key launcher-map "d" #'ediff-buffers)
  (define-key launcher-map "f" #'find-dired)
  (define-key launcher-map "g" #'lgrep)
  (define-key launcher-map "G" #'rgrep)
  (define-key launcher-map "h" #'man) ; Help
  (define-key launcher-map "i" #'package-install-from-buffer)
  (define-key launcher-map "p" #'list-packages)
  (define-key launcher-map "s" #'shell)
  (define-key launcher-map "t" #'proced) ; top
#+END_SRC
*** Narrow-widen DWIM
[[http://endlessparentheses.com/emacs-narrow-or-widen-dwim.html][This Gem from here.]]
#+BEGIN_SRC emacs-lisp
  (defun narrow-or-widen-dwim (p)
    "If the buffer is narrowed, it widens. Otherwise, it narrows intelligently.
    Intelligently means: region, org-src-block, org-subtree, or defun,
    whichever applies first.
    Narrowing to org-src-block actually calls `org-edit-src-code'.
    
    With prefix P, don't widen, just narrow even if buffer is already
    narrowed."
    (interactive "P")
    (declare (interactive-only))
    (cond ((and (buffer-narrowed-p) (not p)) (widen))
          ((region-active-p)
           (narrow-to-region (region-beginning) (region-end)))
          ((derived-mode-p 'org-mode)
           ;; `org-edit-src-code' is not a real narrowing command.
           ;; Remove this first conditional if you don't want it.
           (cond ((org-in-src-block-p)
                  (org-edit-src-code)
                  (delete-other-windows))
                 ((org-at-block-p)
                  (org-narrow-to-block))
                 (t (org-narrow-to-subtree))))
          (t (narrow-to-defun))))
  (define-key ctl-x-map "n" #'narrow-or-widen-dwim)
  (eval-after-load 'org-src
    '(define-key org-src-mode-map
       "\C-x\C-s" #'org-edit-src-exit))
#+END_SRC

*** Ibuffer Mode
Turn on the infamous ibuffer mode
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer) ;; Use Ibuffer for Buffer List
  (setq ibuffer-saved-filter-groups
        '(("home"
           ("Diary" (or (mode . Diary)
                        (name . "diary")
                        (name . "\*Calendar\*")))
           ("emacs-config" (or (filename . ".emacs.d")
                               (filename . ".emacs-lisp")
                               (filename . ".emacs")
                               (filename . "emacs-config")))
           ("Org" (or (mode . org-mode)
                      (filename . "*.org")))
           ("LaTeX" (or (mode . LaTeX-mode)
                        (mode . latex-mode)))
           ("C Family" (or (filename . "code")
                           (mode . c-mode)
                           (mode . c++-mode)))
           ("XML" (or (filename . "xml")
                      (mode . nXML)))
           ("Lisp" (or (filename . "lisp")
                       (mode . lisp-mode)))
           ("Python" (or (filename . "py")
                         (mode . Python)
                         (mode . python)))
           ("Chat" (or (mode . erc-mode)
                       (mode . jabber-chat-mode)
                       (name . "\*-jabber-roster-\*")))
           ("Music" (or (mode . EMMS-mode)
                        (mode . Emms-Browser-mode)
                        (name . "\*Music\*")
                        (mode . Emms-Browser)))
           ("Dired" (or (mode . dired-mode)
                        (mode . dired+-mode)))
           ("Shell Scripts" (or (mode . shell-script-mode)
                        (filename . "sh")))
           ("Gnus" (or (mode . Group)
                       (mode . Summary)
                       (mode . Article)
                       (name . "\*Group\*")
                       (name . "\*Summary nn.*")
                       (name . "\*Article nn.*")
                       (name . "\*Gnus.*")
                       (name . "\*Server\*")
                       (name . ".*sent.*")))
           ("BBDB" (or (mode . BBDB)
                       (name . "\.bbdb")))
           ("Help" (or (name . "\*Help\*")
                       (name . "\*Apropos\*")
                       (mode . Help)
                       (name . "\*info\*")))
           ("TRAMP" (name . "\*tramp/.*"))
           ("Calculator" (or (name . "\*Calc*\*")
                             (mode . Calculator)))
           ("Ruby" (or (mode . Ruby)
                       (filename . "rb")))
           ("Shells" (or (mode . EShell)
                         (name . "\*eshell\**")
                         (mode . Term)
                         (name . "\**term*\*"))))))

  (add-hook 'ibuffer-mode-hook 
            '(lambda ()
               (ibuffer-auto-mode 1)
               (ibuffer-switch-to-saved-filter-groups "home")))
  (setq ibuffer-expert t
        ibuffer-show-empty-filter-groups nil)

#+END_SRC
*** Eval and replace
#+BEGIN_SRC emacs-lisp
(defun fc-eval-and-replace ()
  "Replace the preceding sexp with its value."
  (interactive)
  (backward-kill-sexp)
  (condition-case nil
      (prin1 (eval (read (current-kill 0)))
             (current-buffer))
    (error (message "Invalid expression")
           (insert (current-kill 0)))))
(global-set-key (kbd "C-c e") 'fc-eval-and-replace)
#+END_SRC
*** Mode-line customization
This works fairly well, its very minimal. The only thing "missing" is
the vc status which I can't quite get right.
#+BEGIN_SRC emacs-lisp
  (setq-default mode-line-format
        (list
         " " mode-line-modified
         " %[" mode-line-buffer-identification " %l%] %6 "
         mode-line-misc-info
         mode-line-end-spaces))
  (setq global-mode-string '((t jabber-activity-mode-string)
                            evil-mode-line-tag
                            "" display-time-string appt-mode-string)) ;
#+END_SRC
*** Custom scratch message
#+BEGIN_SRC emacs-lisp
        (setq scratch-msgs '("Curiosity is Life."
                             "All things come to him who waits."
                             "Your skills will accomplish what the force of many cannot."
                             "To combat a sour attitude use kind words."
                             "A good memory is fine but the ability to forget is the one true test of greatness."
                             "A leader is powerful to the degree he empowers others."
                             "If you have hope, you have everything."
                             "Nothing in the world can take the place of persistence."
                             "Teamwork makes the dream work."
                             "Simplicity of character is the natural result of profound thought."
                             "Now is the time to set your sights high and \"Go for it\". "
                             "Do it because you love it."
                             "A new venture will be a success."
                             "He who seeks will find."
                             "If you have no critics you'll likely have no success."
                             "Hope is the best stimulant of life."
                             "There is but one cause of human failure. And that is man's lack of faith in his true self."
                             "A hunch is creativity trying to tell you something."
                             "Write injuries in dust, benefits in marble."
                             "You are strong and brave, use these qualities to pull through."
                             "Do not let what you do not have, prevent you from using what you do have. "
                             "Discipline is the refining fire by which talent becomes ability."
                             "Good books are friends who are always ready to talk to us."
                             "Not all closed eye is sleeping, nor open eye seeing."
                             "Success is never final and failure never fatal. Its courage that counts."
                             "Emotion hinders your true self."
                             "Experience is reflective like a still pond."
                             "The speed of the leader determines the rate of the pack."
                             "We need to attract people who create more light than heat."
                             "Patience is bitter, but its fruit is sweet."
                             "You will find your solution where you least expect it."
                             "In the end all things will be known."
                             "Opportunity will soon knock.  When it does, answer the door!"
                             "In the eyes of lovers, everything is beautiful."
                             "Enjoy what you have, hope for what you lack."
                             "With every deed you are sowing a seed, though the harvest you may not see."
                             "The most valuable of all talents is that of never using two words when one will do."
                             "Softening your attitude opens your heart."
                             "Success is failure turned inside out."
                             "A person with a determined heart frightens problems away."
                             "Do you see difficulty behind every opportunity, or opportunity behind every difficulty?"
                             "Better to do something imperfectly than to do nothing perfectly."
                             "Enjoy what you have! Never mind fame and power."))
        (setq initial-scratch-message 
              (concat ";; Remember: "(nth (random (length scratch-msgs)) scratch-msgs ) "\n"))
        (with-current-buffer "*scratch*"
          (goto-char (point-min))
          (fill-paragraph nil)
          (goto-char (point-max)))
#+END_SRC
*** Whitespace visualization
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :config
    (setq whitespace-style '(face empty tabs lines-tail trailing)))
#+END_SRC
*** VC Options
See manual for other options, 'nil' means display a warning but visit
anyway.
#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks nil)
#+END_SRC
** Literature stuff
*** Unfill region
#+BEGIN_SRC emacs-lisp
 (defun unfill-region (begin end)
  "Remove all linebreaks in a region but leave paragraphs, 
  indented text (quotes,code) and lines starting with an asterix (lists) intact."
  (interactive "r")
  (replace-regexp "\\([^\n]\\)\n\\([^ *\n]\\)" "\\1 \\2" nil begin end))
#+END_SRC
*** Filladapt
#+BEGIN_SRC emacs-lisp
  (use-package filladapt
    :config
    (add-hook 'text-mode-hook 'turn-on-filladapt-mode)
    (add-hook 'text-mode-hook 'turn-on-auto-fill)
    (add-hook 'c-mode-hook 'turn-off-filladapt-mode))
#+END_SRC
*** Aspell spell checking on the fly 
#+BEGIN_SRC emacs-lisp
  (setq ispell-program-name "aspell"
    ispell-extra-args '("--sug-mode=ultra"))
  (dolist (hook '(LaTeX-mode-hook
                  tex-mode-hook
                  text-mode-hook
                  jabber-chat-mode-hook
                  erc-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1))))
  (dolist (hook '(c-mode-hook lisp-mode-hook c++-mode-hook python-mode-hook))
    (add-hook hook (lambda () (flyspell-prog-mode))))
#+END_SRC 
*** LaTeX and friends
#+BEGIN_SRC emacs-lisp
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq TeX-PDF-mode t)
  (setq-default TeX-master nil)
  
  (add-hook 'LaTeX-mode-hook 'auto-fill-mode)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
  
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (setq reftex-plug-into-AUCTeX t)
#+END_SRC

** Code Editing
*** subword mode for non-lispy languages
#+BEGIN_SRC emacs-lisp
  (add-hook 'c-mode-hook 'subword-mode)
  (mapc (lambda (mode)
            (add-hook mode 'subword-mode))
          '(c-mode-hook
            c++-mode-hook
            python-mode-hook
            java-mode-hook))
#+END_SRC
*** Copy paste with X fix
#+BEGIN_SRC lisp
(setq x-select-enable-clipboard t)
(when (functionp #'x-cut-buffer-or-selection-value)
    (setq interprogram-paste-function #'x-cut-buffer-or-selection-value))
#+END_SRC

** C-eldoc
#+BEGIN_SRC emacs-lisp
  ;(add-hook 'c-mode-hook 'c-turn-on-eldoc-mode)
  ;(add-hook 'c++-mode-hook 'c-turn-on-eldoc-mode)
  ;(setq c-eldoc-includes "-I/home/dave/root/include -I./ -I../ -I./include -I../include -I/home/dave/bFrame/external/include -I/home/dave/bFrame/external/RootCorePackages/RootCore/include -I/home/dave/bFrame" )
#+END_SRC
** Comments
#+BEGIN_SRC emacs-lisp
  (defun comment-or-uncomment-line-or-region ()
    "(Un)comment line. If region is active, (un)comment region."
    (interactive)
    (if (region-active-p)
        (comment-or-uncomment-region (region-beginning) (region-end))
      (comment-or-uncomment-region (line-beginning-position) (line-end-position))))
  (define-key global-map (kbd "C-c C-/") 'comment-or-uncomment-line-or-region)
#+END_SRC
** Delimiters (parens and family)
*** Smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :config 
    (smartparens-global-mode t)
    (show-smartparens-global-mode t)
    (require 'smartparens-config)
    (require 'smartparens-ruby)
    (sp-with-modes '(rhtml-mode)
      (sp-local-pair "<" ">")
      (sp-local-pair "<%" "%>"))
    (sp-with-modes '(org-mode)
      (sp-local-pair "$" "$")))
#+END_SRC

** SLIME
Load slime for clisp hacking 
#+BEGIN_SRC emacs-lisp
(load (expand-file-name "~/quicklisp/slime-helper.el"))
(setq inferior-lisp-program "sbcl")
(require 'slime-autoloads)
(add-hook 'lisp-mode-hook (lambda () (slime-mode t)))
(add-hook 'inferior-lisp-mode-hook (lambda () (inferior-slime-mode t)))
(slime-setup '(slime-fancy)) ; almost everything
#+END_SRC
*** Slime tweaks 
#+BEGIN_SRC emacs-lisp
  (defvar electrify-return-match
    "[\]}\)\"]"
    "If this regexp matches the text after the cursor, do an \"electric\"
    return.")

  (defun electrify-return-if-match (arg)
    "If the text after the cursor matches `electrify-return-match' then
    open and indent an empty line between the cursor and the text.  Move the
    cursor to the new line."
    (interactive "P")
    (let ((case-fold-search nil))
      (if (looking-at electrify-return-match)
          (progn (save-excursion (newline-and-indent))
                 (forward-char arg))
        (newline arg))
      (indent-according-to-mode)))

  ;; Using local-set-key in a mode-hook is a better idea.
  (global-set-key (kbd "RET") 'electrify-return-if-match)
#+END_SRC
** Octave
Start octave mode for *.m files
#+BEGIN_SRC emacs-lisp
  (autoload 'octave-mode "octave-mod" nil t)
  (setq auto-mode-alist
        (cons '("\\.m$" . octave-mode) auto-mode-alist))
  (add-hook 'octave-mode-hook
            (lambda ()
              (abbrev-mode 1)
              (auto-fill-mode 1)
              (when (eq window-system 'x)
                (font-lock-mode 1))))
#+END_SRC
* Misc
** Color Theme
#+BEGIN_SRC emacs-lisp
  (add-to-list 'custom-theme-load-path "~/.emacs-lisp/base16-emacs")
  (setq current-theme 'solarized-dark)
  (load-theme current-theme t)
  (defun toggle-themes ()
    (interactive)
    (cond ((eq current-theme 'solarized-light) 
           (setq current-theme 'solarized-dark)
           (shell-command "xrdb -load ~/.Xresources-dark"))
          ((eq current-theme 'solarized-dark)
           (setq current-theme 'solarized-light)
           (shell-command "xrdb -load ~/.Xresources-light")))
    (load-theme current-theme))
#+END_SRC
(setq cities '((durham . (36.0 -79.0))
               (mandan . (46.8 100.9))
               (geneva . (46.2 6.1))))

(setq
 calendar-latitude (cadr (assoc 'durham cities))
 calendar-longitude (caddr (assoc 'durham cities)))

** TODO Switch Theme at Sunrise/Sunset
Implement a sunrise-sunset hook, and use it to switch the theme
between light/dark.
Use timers (cf. [[info:elisp#Timers]])
** Default font
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(font . "Inconsolata-14"))
#+END_SRC
** Font tweaks
More readable fonts for non-programming modes
#+BEGIN_SRC emacs-lisp
(dolist (hook '(erc-mode-hook
		;LaTeX-mode-hook
		Info-mode-hook
		jabber-chat-mode-hook
		edit-server-start-hook
		markdown-mode-hook
		w3m-mode))
  (add-hook hook (lambda () (variable-pitch-mode t) )))
#+END_SRC
** EMMS
Emacs can play music?!
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs-lisp/emms/lisp")
  (require 'emms-setup)
  (emms-standard)
  (emms-default-players)
  (setq emms-playlist-buffer-name "*Music*")
  (setq emms-source-file-default-directory "~/Music")
  (require 'emms-info-libtag)
  (setq emms-info-functions '(emms-info-libtag))
#+END_SRC
** Diary
#+BEGIN_SRC emacs-lisp
  (setq diary-file "~/.emacs-lisp/diary")
#+END_SRC
** Util functions
** Hydra
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-zoom (global-map "<f2>")
    "zoom"
    ("g" text-scale-increase "in")
    ("l" text-scale-decrease "out"))

(defhydra hydra-org-template (:color blue :hint nil)
  "
_c_enter  _q_uote    _L_aTeX:
_l_atex   _e_xample  _i_ndex:
_a_scii   _v_erse    _I_NCLUDE:
_s_rc     ^ ^        _H_TML:
_h_tml    ^ ^        _A_SCII:
"
  ("s" (hot-expand "<s"))
  ("e" (hot-expand "<e"))
  ("q" (hot-expand "<q"))
  ("v" (hot-expand "<v"))
  ("c" (hot-expand "<c"))
  ("l" (hot-expand "<l"))
  ("h" (hot-expand "<h"))
  ("a" (hot-expand "<a"))
  ("L" (hot-expand "<L"))
  ("i" (hot-expand "<i"))
  ("I" (hot-expand "<I"))
  ("H" (hot-expand "<H"))
  ("A" (hot-expand "<A"))
  ("<" self-insert-command "ins")
  ("o" nil "quit"))

(defun hot-expand (str)
  "Expand org template."
  (insert str)
  (org-try-structure-completion))

(define-key org-mode-map "<"
  (lambda () (interactive)
     (if (looking-back "^")
         (hydra-org-template/body)
       (self-insert-command 1))))
#+END_SRC

** Info tweaks
#+BEGIN_SRC emacs-lisp 
  (add-to-list 'Info-directory-list "~/local/share/info")
  (add-to-list 'Info-directory-list "~/rivet/local/share/info")
#+END_SRC
** Calc Tweaks
#+BEGIN_SRC emacs-lisp
(setq math-additional-units
      '((bit    nil           "Bit")
        (byte   "8 * bit"     "Byte")
        (bps    "bit / s"     "Bit per second"))
        math-units-table nil)
#+END_SRC
* Org-inits
** Custom Latex Classes
First setup the export process to use latexmk and pdflatex, remove
"fixltx2e" package since it conflicts with some of the custom classes,
allow org files to bind local variables, and prepare org-latex-classes
for adding templates.
#+BEGIN_SRC emacs-lisp
  (require 'ox-latex)
  (setq org-latex-pdf-process
        '("latexmk -bibtex -pdflatex='pdflatex --shell-escape -interaction nonstopmode' -pdf -f %f"))

  (setf org-latex-default-packages-alist
        (remove '("" "fixltx2e" nil) org-latex-default-packages-alist))
  (setq org-export-allow-bind-keywords t
        org-latex-with-hyperref nil)
  (unless (boundp 'org-latex-classes)
    (setq org-latex-classes nil))
#+END_SRC
This is Duke's dissertation class.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-classes
                   '("dukedissertation"
                     "
  \\documentclass[]{dukedissertation}
  \\usepackage[backend=biber]{biblatex}
  \\usepackage{glossaries}
  \\usepackage{color}
  \\usepackage{bm}
  \\usepackage{amsfonts}
  \\usepackage{amsthm}
  \\usepackage{setspace}
  \\usepackage{slashed}
  \\usepackage{subfig}
  \\usepackage[version=3]{mhchem}
  " 
                     ("\\section{%s}" . "\\section{%s}") 
                     ("\\subsection{%s}" . "\\subsection{%s}") 
                     ("\\subsubsection{%s}" . "\\subsubsection{%s}") 
                     ("\\paragraph{%s}" . "\\paragraph{%s}")
                     ("\\subparagraph{%s}" . "\\subparagraph{%s}")))
  (setq org-latex-table-caption-above nil)
#+END_SRC
Revtex 4.1
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-latex-classes
                 '("revtex4-1"
                   "
\\documentclass[aps,prl,preprint,citeautoscript,showkeys,floatfix]{revtex4-1}
\\usepackage{dcolumn}
\\usepackage{natbib}
\\usepackage[version=3]{mhchem}
" 
                   ("\\section{%s}" . "\\section{%s}") 
                   ("\\subsection{%s}" . "\\subsection{%s}") 
                   ("\\subsubsection{%s}" . "\\subsubsection{%s}") 
                   ("\\paragraph{%s}" . "\\paragraph{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph{%s}")))
#+END_SRC
ATLAS Note 
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-latex-classes
                 '("atlasdoc"
                   "
\\newcommand*{\\ATLASLATEXPATH}{latex/}
\\documentclass[UKenglish,texlive=2015]{latex/atlasdoc}
\\usepackage{\\ATLASLATEXPATH atlaspackage}
\\usepackage{\\ATLASLATEXPATH atlasbiblatex}
\\usepackage{\\ATLASLATEXPATH atlascontribute}
\\usepackage{\\ATLASLATEXPATH atlasphysics}
\\graphicspath{{logos/}{figures/}}
\\input{ATL-COM-PHYS-2015-XXX-metadata}
" 
                   ("\\section{%s}" . "\\section{%s}") 
                   ("\\subsection{%s}" . "\\subsection{%s}") 
                   ("\\subsubsection{%s}" . "\\subsubsection{%s}") 
                   ("\\paragraph{%s}" . "\\paragraph{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph{%s}")))
#+END_SRC
** Org Ref
#+BEGIN_SRC emacs-lisp
  (use-package org-ref 
      :ensure t
      :config 
      (setq reftex-default-bibliography '("~/Dropbox/org/research/papers/bibliography.bib")
        org-ref-bibliography-notes "~/Dropbox/org/research/papers/bibliography.org"
        org-ref-default-bibliography '("~/Dropbox/org/research/papers/bibliography.bib")
        org-ref-pdf-directory "~/Dropbox/org/research/papers/bibtex-pdfs/"
        bibtex-completion-pdf-open-function #'org-open-file))

#+END_SRC
** Agenda Files
*** TODO Clean up after expanding agenda files
#+BEGIN_SRC emacs-lisp  
  (defun db-flatten(x)
    (cond ((null x) nil)
      ((listp x) (append (db-flatten (car x)) (db-flatten (cdr x))))
      (t (list x))))

  (defun slurp-org-files (dir)
    "Returns a list of org files contained in DIR recursively"
    (db-flatten (remove nil (mapcar (lambda (file)
                           (cond ((or (string-match "^\\." file) (string-match "~" file)) nil)
                                 ((string-match "\.org" file) (concat dir "/" file))
                                 ((file-accessible-directory-p (concat dir "/" file)) 
                                  (slurp-org-files (concat dir "/" file)))
                                 (t nil))) (directory-files dir)))))

    (setq org-agenda-include-diary t)
    (setq org-agenda-files (slurp-org-files "~/Dropbox/org"))
  (add-to-list 'org-agenda-files "~/.emacs-lisp/init.org")
#+END_SRC
** Appointment Notifications
Set appropriate variables for appointment pop-ups 5mins before they
happen.
#+BEGIN_SRC emacs-lisp
  (setq appt-message-warning-time 5
        appt-display-mode-line t
        appt-display-format 'window)
  (appt-activate 1)

  ;; Inform appt of changes to agenda whenever agenda is viewed
  (add-hook 'org-finalize-agenda-hook 'org-agenda-to-appt)
  
  (defun db-appt-display (min-to-app new-time msg) 
    (notify (format "Appointment in %s minute(s)" min-to-app) 
            msg 
            :icon "/usr/share/icons/gnome/32x32/status/appointment-soon.png" 
            :urgency "high"))
  (setq appt-disp-window-function (function db-appt-display))
#+END_SRC
** Misc Org Inits
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-classes 
               '("memoir"
                 "\\documentclass[12pt]{memoir}" 
                 ("\\section{%s}" . "\\section*{%s}") 
                 ("\\subsection{%s}" . "\\subsection*{%s}") 
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}") 
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (setq org-export-allow-bind-keywords t)

  (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))

  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)

                                          ;(require 'org-special-blocks)
                                          ;(setq org-alphabetical-lists t)
  (define-key mode-specific-map [?a] 'org-agenda)

  (add-hook 'org-agenda-mode-hook
            (lambda ()
              (define-key org-agenda-mode-map "\C-n" 'next-line)
              (define-key org-agenda-keymap "\C-n" 'next-line)
              (define-key org-agenda-mode-map "\C-p" 'previous-line)
              (define-key org-agenda-keymap "\C-p" 'previous-line)
              ))
  (setcdr (assoc "\\.pdf\\'" org-file-apps) "evince %s")
  (eval-after-load "org"
    '(progn
       (define-prefix-command 'org-todo-state-map)
       (define-key org-mode-map "\C-cx" 'org-todo-state-map)
       (define-key org-todo-state-map "x"
         #'(lambda nil (interactive) (org-todo "CANCELLED")))
       (define-key org-todo-state-map "d"
         #'(lambda nil (interactive) (org-todo "DONE")))
       (define-key org-todo-state-map "f"
         #'(lambda nil (interactive) (org-todo "DEFERRED")))
       (define-key org-todo-state-map "l"
         #'(lambda nil (interactive) (org-todo "DELEGATED")))
       (define-key org-todo-state-map "s"
         #'(lambda nil (interactive) (org-todo "STARTED")))
       (define-key org-todo-state-map "w"
         #'(lambda nil (interactive) (org-todo "WAITING")))))

  (setq org-export-copy-to-kill-ring nil)
#+END_SRC
** Org-mode static site publishing
*** Research Log Book
#+BEGIN_SRC emacs-lisp
  (setq org-html-metadata-timestamp-format "%m/%d/%Y"
   org-publish-project-alist
   '(("rlog-orgfiles"
      :base-directory "~/research-log/"
      :base-extension "org"
      :publishing-directory "~/public/";"/dmb60@grads-bc:/var/phy/web/users/dmb60/public/"
      :recursive t
      :publishing-function org-html-publish-to-html
      :headline-levels 3
      :auto-preamble t
      :section-numbers nil
      :table-of-contents nil
      :style-include-default nil
      :html-head "<link rel=\"stylesheet\" type=\"text/css\" href=\"./css/style.css\" />"
      :html-preamble t
      :html-postamble "<p class=\"postamble\"> Written by: %a. Updated: %T. </p>")
     ("rlog-images"
      :base-directory "~/research-log/images/"
      :base-extension "jpg\\|gif\\|png"
      :publishing-directory "~/public/images/";"/dmb60@grads-bc:/var/phy/web/users/dmb60/public/images/"
      :recursive t
      :publishing-function org-publish-attachment)
     
     ("rlog-css"
      :base-directory "~/research-log/css/"
      :base-extension "css\\|el"
      :recursive t
      :publishing-directory "~/public/";"/dmb60@grads-bc:/var/phy/web/users/dmb60/public/"
      :publishing-function org-publish-attachment)
     ("rlog-website" :components ("rlog-orgfiles" "rlog-images" "rlog-other" "rlog-css"))
     
     ("thhg-orgfiles"
      :base-directory "~/hitchhikers-guide-to-hep/"
      :base-extension "org"
      :publishing-directory "~/public/the-guide/"
      :recursive t
      :publishing-function org-html-publish-to-html
      :headline-levels 5
      :auto-preamble t
      :section-numbers nil
      :table-of-contents t
      :style-include-default nil
      :html-head "<link rel=\"stylesheet\" type=\"text/css\" href=\"./css/style.css\" />"
      :html-preamble t
      :html-postamble "<p class=\"postamble\"><hr/> Written by: %a. Last updated %d. </p>")
     ("thhg-images"
      :base-directory "~/hitchhikers-guide-to-hep/images/"
      :base-extension "jpg\\|gif\\|png"
      :publishing-directory "~/public/the-guide/images/"
      :recursive t
      :publishing-function org-publish-attachment)
     
     ("thhg-css"
      :base-directory "~/hitchhikers-guide-to-hep/css/"
      :base-extension "css\\|el"
      :recursive t
      :publishing-directory "~/public/the-guide/"
      :publishing-function org-publish-attachment)
     ("thhg-website" :components ("thhg-orgfiles" "thhg-images" "thhg-other" "thhg-css"))
     ("dbgh-orgfiles"
      :base-directory "~/dbjergaard.github.io/"
      :base-extension "org"
      :publishing-directory "~/dbjergaard.github.io/"
      :recursive t
      :publishing-function org-html-publish-to-html
      :headline-levels 5
      :auto-preamble t
      :section-numbers nil
      :table-of-contents t
      :style-include-default nil
      :html-head "<link rel=\"stylesheet\" type=\"text/css\" href=\"./css/style.css\" />"
      :html-preamble t
      :html-postamble "<p class=\"postamble\"><hr/> Written by: %a. Last updated %d. </p>")
     ("dbgh-images"
      :base-directory "~/dbjergaard.github.io/images/"
      :base-extension "jpg\\|gif\\|png"
      :publishing-directory "~/dbjergaard.github.io/images/"
      :recursive t
      :publishing-function org-publish-attachment)
     
     ("dbgh-css"
      :base-directory "~/dbjergaard.github.io/css/"
      :base-extension "css\\|el"
      :recursive t
      :publishing-directory "~/dbjergaard.github.io/css/"
      :publishing-function org-publish-attachment)
     ("dbgh-website" :components ("dbgh-orgfiles" "dbgh-images" "dbgh-other" "dbgh-css"))))
#+END_SRC

** Babel
Active babel langugages
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((scheme . t)
     (C . t)
     (ruby . t)
     ;(cpp . t)
     (gnuplot .t )
     (lisp . t)
     (sh . t)))
#+END_SRC
** Interface tweaks
#+BEGIN_SRC emacs-lisp
  (setq org-hide-emphasis-markers t)
  (font-lock-add-keywords 'org-mode
                          '(("^ +\\([-*]\\) "
                             (0 (prog1 () (compose-region 
                                           (match-beginning 1)
                                           (match-end 1) "•"))))))
  (use-package org-bullets
    :ensure t
    :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode t))))

  (let* ((font '(:font "Source Sans Pro"))
         (base-font-color     (face-foreground 'default nil 'default))
         (headline           `(:inherit default :weight bold :foreground ,base-font-color)))

    (custom-theme-set-faces 'user
                            `(org-level-8 ((t (,@headline ,@font))))
                            `(org-level-7 ((t (,@headline ,@font))))
                            `(org-level-6 ((t (,@headline ,@font))))
                            `(org-level-5 ((t (,@headline ,@font))))
                            `(org-level-4 ((t (,@headline ,@font :height 1.1))))
                            `(org-level-3 ((t (,@headline ,@font :height 1.25))))
                            `(org-level-2 ((t (,@headline ,@font :height 1.5))))
                            `(org-level-1 ((t (,@headline ,@font :height 1.75))))
                            `(org-document-title ((t (,@headline ,@font :height 1.5 :underline nil))))))
#+END_SRC
* HEP Tools
#+BEGIN_SRC emacs-lisp
;; Teach emacs where to find root and friends
(setenv "LD_LIBRARY_PATH"
	(concat "/home/dave/root/xrootd-3.2.7/lib:"
		"/home/dave/root/lib:"
		(getenv "LD_LIBRARY_PATH")))
(setenv "PATH"
	(concat "/home/dave/root/bin:" 
		(getenv "PATH")))
  (add-to-list 'load-path "/home/dave/root-oak/")
  (load-file "/home/dave/hep-toolkit/lab-notebook.el")
#+END_SRC
* CD
#+BEGIN_SRC emacs-lisp
(cd "~/")
#+END_SRC
